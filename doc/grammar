
identifier_list
	: IDENTIFIER ( ',' IDENTIFIER )
	;

expression_list
	: ( expression ( ',' expression )*
	;

keyword_item
	: expression ':' expression
	;

keyword_list
	: keyword_item ( ',' keyword_item )*
	;

int_literal
	: '0' 'x' [a-fA-F0-9]+
	| '0' 'o' [0-7]+
	| '0' 'b' [0-1]+
	| [1-9][0-9]*
	;

bool_literal
	: 'true'
	| 'false'
	;

array_literal
	: '[' [ expression_list ] ']'
	;

dict_literal
	: '{' [ keyword_list ] '}'
	;

literal
	: int_literal
	| bool_literal
	| array_literal
	| dict_literal
	;


primary_expression
	: IDENTIFIER
	| STRING
	| literal
	| '(' expression ')'
	;

keyword_arguments
	: keyword_item ( ',' keyword_item )*
	;

argument_list
	: expression_list [ ',' keyword_arguments ]
	| keyword_arguments
	;

function_expression
	: IDENTIFIER '(' [ argument_list ] ')'
	;

method_expression
	: postfix_expression '.' function_expression
	;

postfix_expression
	: primary_expression
	| postfix_expression '[' expression ']'
	| function_expression
	| method_expression
	;

unary_operator
	: 'not'
	| '+'
	| '-'
	;

unary_expression
	: postfix_expression
	| ( unary operator unary_expression )
	;

multiplication_operator
	: '*'
	| '/'
	| '%'
	;

multiplication_expression
	: unary_expression
	| ( multiplication_expression multiplication_operator multiplication_expression )
	;

addition_operator
	: '+'
	| '-'
	;

addition_expression
	: multiplication_expression
	| ( addition_expression addition_operator multiplication_expression )
	;

relation_operator
	: '>'
	| '<'
	| '>='
	| '<='
	| 'in'
	| 'not' 'in'
	;

relation_expression
	: addition_expression
	| ( relation_expression relation_operator addition_expression )

equaliry_operator
	: '=='
	| '!='
	;

equality_expression
	: relation_expression
	| ( equality_expression equality_operator relation_expression )
	;

and_expression
	: equality_expression
	| ( and_expression 'and' equality_expression )
	;

or_expression
	: and_expression
	| ( or_expression 'or' and_expression )

condition_expression
	: or_expression
	| ( or_expression '?' expression ':' expression )
	;

assignment_operator
	: '='
	| '*='
	| '/='
	| '%='
	| '+='
	| '-='
	;

expression
	: condition_expression
	| ( or_expression assignment_operator expression )

selection
	: 'if' expression NEWLINE ( statement )*
	( 'elif' expression NEWLINE ( statement )* )*
	[ 'else' ( statement )*
	'endif'
	;

iteration
	: 'foreach' identifier_list ':' ( IDENTIFIER | array_literal )
	( statement | ( 'break' | 'continue' ) NEWLINE )*
	'endforeach'
	;

statement
	: expression
	| selection
	| iteration
	;

grammar
	: ( NEWLINE | statement )*
	;
