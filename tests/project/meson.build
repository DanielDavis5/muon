tests = [
    ['common/1 trivial', {}],
    ['common/2 cpp', {}],
    ['common/3 static', {}],
    ['common/4 shared', {}],
    ['common/5 linkstatic', {}],
    ['common/6 linkshared', {}],
    ['common/7 mixed', {}],
    ['common/8 install', {}],
    ['common/9 header install', {}],
    ['common/10 man install', {}],
    ['common/11 subdir', {}],
    ['common/12 data', {}],
    # missing: 'common/13 pch'
    ['common/14 configure file', {}],
    ['common/15 if', {}],
    ['common/16 comparison', {}],
    ['common/17 array', {}],
    ['common/18 includedir', {}],
    ['common/19 header in file list', {}],
    ['common/20 global arg', {}],
    ['common/21 target arg', {}],
    ['common/22 object extraction', {}],
    ['common/23 endian', {}],
    ['common/24 library versions', {}],
    ['common/25 config subdir', {}],
    ['common/26 find program', {}],
    ['common/27 multiline string', {}],
    ['common/28 try compile', {}],
    ['common/29 compiler id', {}],
    ['common/30 sizeof', {}],
    ['common/31 define10', {}],
    ['common/32 has header', {}],
    ['common/33 run program', {}],
    ['common/34 logic ops', {}],
    ['common/35 string operations', {}],
    ['common/36 has function', {}],
    ['common/37 has member', {'should_fail': true}],
    ['common/38 alignment', {}],
    ['common/39 library chain', {}],
    ['common/40 options', {}],
    ['common/41 test args', {}],
    ['common/42 subproject', {}],
    ['common/43 subproject options', {}],
    ['common/44 pkgconfig-gen', {'should_fail': true}],
    ['common/45 custom install dirs', {}],
    ['common/46 subproject subproject', {}],
    ['common/47 same file name', {}],
    ['common/48 file grabber', {}],
    ['common/49 custom target', {'should_fail': true}],
    ['common/50 custom target chain', {}],
    ['common/51 run target', {'should_fail': true}],
    ['common/52 object generator', {}],
    ['common/53 install script', {'should_fail': true}],
    ['common/54 custom target source output', {}],
    ['common/55 exe static shared', {}],
    ['common/56 array methods', {'should_fail': true}],
    ['common/57 custom header generator', {}],
    ['common/58 multiple generators', {}],
    ['common/59 install subdir', {}],
    ['common/60 foreach', {'should_fail': true}],
    ['common/61 number arithmetic', {}],
    ['common/62 string arithmetic', {}],
    ['common/63 array arithmetic', {}],
    ['common/64 arithmetic bidmas', {}],
    ['common/65 build always', {'should_fail': true}],
    ['common/66 vcstag', {}],
    ['common/67 modules', {'should_fail': true}],
    ['common/68 should fail', {}],
    ['common/69 configure file in custom target', {}],
    ['common/70 external test program', {}],
    ['common/71 ctarget dependency', {}],
    ['common/72 shared subproject', {'should_fail': true}],
    ['common/73 shared subproject 2', {}],
    ['common/74 file object', {}],
    ['common/75 custom subproject dir', {'should_fail': true}],
    ['common/76 has type', {}],
    ['common/77 extract from nested subdir', {'should_fail': true}],
    ['common/78 internal dependency', {}],
    ['common/79 same basename', {}],
    ['common/80 declare dep', {}],
    ['common/81 extract all', {}],
    ['common/82 add language', {'should_fail': true}],
    ['common/83 identical target name in subproject', {}],
    ['common/84 plusassign', {}],
    ['common/85 skip subdir', {}],
    ['common/86 private include', {'should_fail': true}],
    ['common/87 default options', {'should_fail': true}],
    ['common/88 dep fallback', {'should_fail': true}],
    ['common/89 default library', {}],
    ['common/90 gen extra', {'should_fail': true}],
    ['common/91 benchmark', {'should_fail': true}],
    ['common/92 test workdir', {}],
    ['common/93 suites', {}],
    ['common/94 threads', {}],
    ['common/95 manygen', {'should_fail': true}],
    ['common/96 stringdef', {}],
    ['common/97 find program path', {}],
    ['common/98 subproject subdir', {'should_fail': true}],
    ['common/99 postconf', {'should_fail': true}],
    ['common/100 postconf with args', {'should_fail': true}],
    ['common/101 testframework options', {'should_fail': true}],
    ['common/102 extract same name', {}],
    ['common/103 has header symbol', {'should_fail': true}],
    ['common/104 has arg', {'should_fail': true}],
    ['common/105 generatorcustom', {}],
    ['common/106 multiple dir configure file', {}],
    ['common/107 spaces backslash', {'should_fail': true}],
    ['common/108 ternary', {}],
    ['common/109 custom target capture', {}],
    ['common/110 allgenerate', {}],
    ['common/111 pathjoin', {}],
    ['common/112 subdir subproject', {}],
    ['common/113 interpreter copy mutable var on assignment', {}],
    # missing: 'common/14 skip'
    ['common/115 subproject project arguments', {}],
    ['common/116 test skip', {}],
    ['common/117 shared module', {'should_fail': true}],
    ['common/118 llvm ir and assembly', {'should_fail': true}],
    ['common/119 cpp and asm', {'should_fail': true}],
    ['common/120 extract all shared library', {}],
    ['common/121 object only target', {'should_fail': true}],
    ['common/122 no buildincdir', {}],
    ['common/123 custom target directory install', {}],
    ['common/124 dependency file generation', {}],
    ['common/125 configure file in generator', {'should_fail': true}],
    ['common/127 generated assembly', {'should_fail': true}],
    ['common/128 build by default targets in tests', {}],
    ['common/129 build by default', {'should_fail': true}],
    ['common/130 include order', {}],
    ['common/131 override options', {'should_fail': true}],
    ['common/132 get define', {}],
    ['common/133 c cpp and asm', {'should_fail': true}],
    ['common/134 compute int', {'should_fail': true}],
    ['common/135 custom target object output', {}],
    ['common/136 empty build file', {}],
    ['common/137 whole archive', {'should_fail': true}],
    ['common/138 C and CPP link', {'should_fail': true}],
    ['common/139 mesonintrospect from scripts', {'should_fail': true}],
    ['common/140 custom target multiple outputs', {}],
    ['common/141 special characters', {}],
    ['common/142 nested links', {}],
    ['common/143 list of file sources', {}],
    ['common/144 link depends custom target', {}],
    ['common/145 recursive linking', {}],
    ['common/146 library at root', {}],
    ['common/147 simd', {'should_fail': true}],
    ['common/148 shared module resolving symbol in executable', {}],
    ['common/149 dotinclude', {}],
    ['common/150 reserved targets', {}],
    ['common/151 duplicate source names', {}],
    ['common/152 index customtarget', {}],
    ['common/153 wrap file should not failed', {'should_fail': true}],
    ['common/154 includedir subproj', {'should_fail': true}],
    ['common/155 subproject dir name collision', {'should_fail': true}],
    ['common/156 config tool variable', {'should_fail': true}],
    ['common/157 custom target subdir depend files', {}],
    ['common/158 disabler', {}],
    ['common/159 array option', {}],
    ['common/160 custom target template substitution', {'should_fail': true}],
    ['common/161 not-found dependency', {'should_fail': true}],
    ['common/162 subdir if_found', {'should_fail': true}],
    ['common/163 default options prefix dependent defaults', {}],
    ['common/164 dependency factory', {'should_fail': true}],
    ['common/165 get project license', {}],
    ['common/166 yield', {'should_fail': true}],
    ['common/167 subproject nested subproject dirs', {'should_fail': true}],
    ['common/168 preserve gendir', {'should_fail': true}],
    ['common/169 source in dep', {}],
    ['common/170 generator link whole', {'should_fail': true}],
    ['common/171 initial c_args', {'should_fail': true}],
    ['common/172 identical target name in subproject flat layout', {}],
    ['common/173 as-needed', {}],
    ['common/174 ndebug if-release enabled', {}],
    ['common/175 ndebug if-release disabled', {}],
    ['common/176 subproject version', {}],
    ['common/177 subdir_done', {}],
    ['common/178 bothlibraries', {'should_fail': true}],
    ['common/179 escape and unicode', {}],
    ['common/180 has link arg', {'should_fail': true}],
    ['common/181 same target name flat layout', {}],
    ['common/182 find override', {'should_fail': true}],
    ['common/183 partial dependency', {'should_fail': true}],
    ['common/184 openmp', {'should_fail': true}],
    ['common/185 same target name', {}],
    ['common/186 test depends', {}],
    ['common/187 args flattening', {'should_fail': true}],
    ['common/188 dict', {'should_fail': true}],
    ['common/189 check header', {'should_fail': true}],
    ['common/190 install_mode', {'should_fail': true}],
    ['common/191 subproject array version', {}],
    ['common/192 feature option', {'should_fail': true}],
    ['common/193 feature option disabled', {'should_fail': true}],
    ['common/194 static threads', {}],
    ['common/195 generator in subdir', {'should_fail': true}],
    ['common/196 subproject with features', {'should_fail': true}],
    ['common/197 function attributes', {'should_fail': true}],
    ['common/198 broken subproject', {'should_fail': true}],
    ['common/199 argument syntax', {'should_fail': true}],
    ['common/200 install name_prefix name_suffix', {}],
    ['common/201 kwarg entry', {}],
    ['common/202 custom target build by default', {}],
    ['common/203 find_library and headers', {'should_fail': true}],
    ['common/204 line continuation', {}],
    ['common/205 native file path override', {}],
    ['common/206 tap tests', {'should_fail': true}],
    ['common/207 warning level 0', {}],
    ['common/208 link custom', {}],
    ['common/209 link custom_i single from multiple', {}],
    ['common/210 link custom_i multiple from multiple', {}],
    ['common/211 dependency get_variable method', {}],
    # missing: 212 source set configuration_data/
    # missing: 213 source set dictionary/
    # missing: 214 source set custom target/
    # missing: 215 source set realistic example/
    ['common/216 custom target input extracted objects', {'should_fail': true}],
    ['common/217 test priorities', {}],
    ['common/218 include_dir dot', {}],
    ['common/219 include_type dependency', {'should_fail': true}],
    ['common/220 fs module', {'should_fail': true}],
    ['common/221 zlib', {}],
    ['common/222 native prop', {'should_fail': true}],
    ['common/223 persubproject options', {'should_fail': true}],
    ['common/224 arithmetic operators', {'should_fail': true}],
    ['common/225 link language', {'should_fail': true}],
    ['common/226 link depends indexed custom target', {}],
    # skip this test for now because it takes too long
    # ['common/227 very long commmand line', {}],
    ['common/228 custom_target source', {}],
    ['common/229 disabler array addition', {}],
    ['common/230 external project', {'should_fail': true}],
    ['common/231 subdir files', {}],
    ['common/232 dependency allow_fallback', {'should_fail': true}],
    ['common/233 wrap case', {'should_fail': true}],
    ['common/234 get_file_contents', {'should_fail': true}],
    ['common/235 invalid standard overriden to valid', {'should_fail': true}],
    ['common/236 proper args splitting', {'should_fail': true}],
    ['common/237 fstrings', {}],
    ['common/238 dependency include_type inconsistency', {'should_fail': true}],
    ['common/239 includedir violation', {}],
    ['common/240 dependency native host == build', {}],
    ['common/241 set and get variable', {}],
    ['common/242 custom target feed', {'should_fail': true}],
    ['common/243 escape++', {}],
    
    # unit
    ['unit/65 alias target', {}],
]

ninja = find_program('ninja', required: false)
if not ninja.found()
    subdir_done()
endif

test_dir = meson.current_build_dir()

runner = find_program('runner.sh')

foreach t : tests
    # The exit code to use when a test is skipped
    skip_exit_code = 0
    if 'should_fail' in t[1]
        skip_exit_code = 1
    endif

    test(
        t[0],
        runner,
        args: [
            muon,
            ninja.path(),
            meson.current_source_dir() / t[0],
            test_dir / t[0],
            skip_exit_code.to_string(),
        ],
        suite: 'project',
        kwargs: t[1],
    )
endforeach
